const CACHE_NAME = 'wild-lands-cache-v1';

// This list is auto-generated by me (the AI) by inspecting your asset files.
// In a real build process, this would be automated.
const URLS_TO_CACHE = [
  '/',
  '/index.html',
  '/index.tsx',
  '/App.tsx',
  '/types.ts',
  '/constants.ts',
  '/hooks/useGameState.ts',
  '/utils/cardUtils.ts',
  '/utils/logUtils.ts',
  '/utils/themeUtils.ts',
  '/utils/gameplayUtils.ts',
  '/utils/saveUtils.ts',
  '/utils/hapticUtils.ts',
  '/utils/ttsManager.ts',
  '/utils/soundManager.ts',
  '/utils/imageManager.ts',
  '/utils/cheatCodes.ts',
  '/utils/deepMerge.ts',
  '/screens/LandingScreen.tsx',
  '/screens/SetupScreen.tsx',
  '/screens/GameScreen.tsx',
  '/screens/DeckReviewScreen.tsx',
  '/components/CardComponent.tsx',
  '/components/ModalComponent.tsx',
  '/components/GameLogComponent.tsx',
  '/components/OverlayEffectsComponent.tsx',
  '/components/BossIntroStoryComponent.tsx',
  '/components/StoryLoadingComponent.tsx',
  '/components/NGPlusLoadingComponent.tsx',
  '/components/TutorialComponent.tsx',
  '/components/StatsModalComponent.tsx',
  '/components/TTSModalComponent.tsx',
  '/components/ManualContent.tsx',
  '/components/SaveGameModalComponent.tsx',
  '/constants/card-data/index.ts',
  '/constants/card-data/objectives.ts',
  '/constants/card-data/western.ts',
  '/constants/card-data/japan.ts',
  '/constants/card-data/africa.ts',
  '/constants/card-data/horror.ts',
  '/constants/card-data/cyberpunk.ts',
  '/assets/card-illustrations/index.ts',
  '/assets/card-illustrations/common.ts',
  '/assets/card-illustrations/western.ts',
  '/assets/card-illustrations/japan.ts',
  '/assets/card-illustrations/africa.ts',
  '/assets/card-illustrations/horror.ts',
  '/assets/card-illustrations/cyberpunk.ts',
  '/assets/sounds/index.ts',
  '/assets/sounds/common.ts',
  '/assets/sounds/western.ts',
  '/assets/sounds/japan.ts',
  '/assets/sounds/africa.ts',
  '/assets/sounds/horror.ts',
  '/assets/sounds/cyberpunk.ts',
  '/assets/sounds/western_animals.ts',
  '/assets/sounds/japan_animals.ts',
  '/assets/sounds/africa_animals.ts',
  '/assets/sounds/horror_animals.ts',
  '/assets/sounds/cyberpunk_animals.ts',
  'https://storage.googleapis.com/wild-lands-card-images/hunter.png',
  'https://storage.googleapis.com/wild-lands-card-images/trapper.png',
  'https://storage.googleapis.com/wild-lands-card-images/gunslinger.png',
  'https://storage.googleapis.com/wild-lands-card-images/doctor.png',
  'https://storage.googleapis.com/wild-lands-card-images/herbalist.png',
  'https://storage.googleapis.com/wild-lands-card-images/explorer.png',
  'https://storage.googleapis.com/wild-lands-card-images/preacher.png',
  'https://storage.googleapis.com/wild-lands-card-images/prospector.png',
  'https://storage.googleapis.com/wild-lands-card-images/custom_fry_clover.png',
  'https://storage.googleapis.com/wild-lands-card-images/custom_fry_tonic.png',
  'https://storage.googleapis.com/wild-lands-card-images/generic_bounty_proof.png',
  'https://storage.googleapis.com/wild-lands-card-images/generic_trophy.png',
  'https://storage.googleapis.com/wild-lands-card-images/background_image.png',
  'https://storage.googleapis.com/wild-lands-card-images/background_image2.png',
  'https://storage.googleapis.com/wild-lands-card-images/background_image_fj.png',
  'https://storage.googleapis.com/wild-lands-card-images/background_image_fj2.png',
  'https://storage.googleapis.com/wild-lands-card-images/background_image_as.png',
  'https://storage.googleapis.com/wild-lands-card-images/background_image_as2.png',
  'https://storage.googleapis.com/wild-lands-card-images/background_image_sh.png',
  'https://storage.googleapis.com/wild-lands-card-images/background_image_sh2.png',
  'https://storage.googleapis.com/wild-lands-card-images/background_image_cp.png',
  'https://storage.googleapis.com/wild-lands-card-images/background_image_cp2.png',
  // All other image and sound assets... (This is an abbreviated list for the example)
  ...Object.values({"COMMON_ILLUSTRATIONS":{"hunter":"https://storage.googleapis.com/wild-lands-card-images/hunter.png","trapper":"https://storage.googleapis.com/wild-lands-card-images/trapper.png","gunslinger":"https://storage.googleapis.com/wild-lands-card-images/gunslinger.png","doctor":"https://storage.googleapis.com/wild-lands-card-images/doctor.png","herbalist":"https://storage.googleapis.com/wild-lands-card-images/herbalist.png","explorer":"https://storage.googleapis.com/wild-lands-card-images/explorer.png","preacher":"https://storage.googleapis.com/wild-lands-card-images/preacher.png","prospector":"https://storage.googleapis.com/wild-lands-card-images/prospector.png","custom_fry_clover":"https://storage.googleapis.com/wild-lands-card-images/custom_fry_clover.png","custom_fry_tonic":"https://storage.googleapis.com/wild-lands-card-images/custom_fry_tonic.png","generic_bounty_proof":"https://storage.googleapis.com/wild-lands-card-images/generic_bounty_proof.png","generic_trophy":"https://storage.googleapis.com/wild-lands-card-images/generic_trophy.png"},"SOUND_ASSETS":{"music_setup":"https://storage.googleapis.com/wild-lands-sound-files/music_setup.mp3","music_setup_fj":"https://storage.googleapis.com/wild-lands-sound-files/music_setup_fj.mp3","music_setup_as":"https://storage.googleapis.com/wild-lands-sound-files/music_setup_as.mp3","music_setup_sh":"https://storage.googleapis.com/wild-lands-sound-files/music_setup_sh.mp3","music_setup_cp":"https://storage.googleapis.com/wild-lands-sound-files/music_setup_cp.mp3","music_main":"https://storage.googleapis.com/wild-lands-sound-files/music_main.mp3","music_boss":"https://storage.googleapis.com/wild-lands-sound-files/music_boss.mp3","music_victory":"https://storage.googleapis.com/wild-lands-sound-files/music_victory.mp3","music_defeat":"https://storage.googleapis.com/wild-lands-sound-files/music_defeat.mp3","card_click":"https://storage.googleapis.com/wild-lands-sound-files/card_click.mp3","card_play":"https://storage.googleapis.com/wild-lands-sound-files/card_play.mp3","player_hurt":"https://storage.googleapis.com/wild-lands-sound-files/player_hurt.mp3","enemy_hurt":"https://storage.googleapis.com/wild-lands-sound-files/enemy_hurt.mp3","heal":"https://storage.googleapis.com/wild-lands-sound-files/heal.mp3","gold":"https://storage.googleapis.com/wild-lands-sound-files/gold.mp3","card_draw":"https://storage.googleapis.com/wild-lands-sound-files/card_draw.mp3","turn_end":"https://storage.googleapis.com/wild-lands-sound-files/turn_end.mp3","threat_reveal":"https://storage.googleapis.com/wild-lands-sound-files/threat_reveal.mp3","trap_snap":"https://storage.googleapis.com/wild-lands-sound-files/trap_snap.mp3","victory_sting":"https://storage.googleapis.com/wild-lands-sound-files/victory_sting.mp3","ui_button_click":"https://storage.googleapis.com/wild-lands-sound-files/ui_button_click.mp3","lightning_strike":"https://storage.googleapis.com/wild-lands-sound-files/lightning_strike.mp3","laudanum_use":"https://storage.googleapis.com/wild-lands-sound-files/laudanum_drink.mp3","rockslide":"https://storage.googleapis.com/wild-lands-sound-files/rockslide.mp3","mountain_sickness":"https://storage.googleapis.com/wild-lands-sound-files/mountain_sickness.mp3","human_threat_reveal":"https://storage.googleapis.com/wild-lands-sound-files/footsteps.mp3","gunshot":"https://storage.googleapis.com/wild-lands-sound-files/gunshot.mp3","bow_shot":"https://storage.googleapis.com/wild-lands-sound-files/bow_shot.mp3","blade_slice":"https://storage.googleapis.com/wild-lands-sound-files/blade_slice.mp3","item_rifle":"https://storage.googleapis.com/wild-lands-sound-files/item_rifle.mp3","item_hunting_rifle":"https://storage.googleapis.com/wild-lands-sound-files/item_hunting_rifle.mp3","item_six_shooter":"https://storage.googleapis.com/wild-lands-sound-files/item_six_shooter.mp3","item_six_iron":"https://storage.googleapis.com/wild-lands-sound-files/item_six_iron.mp3","item_sawed_off":"https://storage.googleapis.com/wild-lands-sound-files/item_sawed_off.mp3"},"ALL_ILLUSTRATIONS":Object.values(allIllustrations).reduce((acc, val) => ({...acc, ...val}), {}), "ALL_SOUNDS": Object.values(allSounds).reduce((acc, val) => ({...acc, ...val}), {})}).flat()
];

self.addEventListener('install', (event) => {
  event.waitUntil(
    caches.open(CACHE_NAME)
      .then((cache) => {
        console.log('Opened cache');
        // Use a Set to ensure unique URLs
        const uniqueUrls = [...new Set(URLS_TO_CACHE)];
        return cache.addAll(uniqueUrls);
      })
      .catch(err => {
        console.error('Failed to cache assets during install:', err);
      })
  );
});

self.addEventListener('activate', (event) => {
  const cacheWhitelist = [CACHE_NAME];
  event.waitUntil(
    caches.keys().then((cacheNames) => {
      return Promise.all(
        cacheNames.map((cacheName) => {
          if (cacheWhitelist.indexOf(cacheName) === -1) {
            console.log('Deleting old cache:', cacheName);
            return caches.delete(cacheName);
          }
        })
      );
    })
  );
});

self.addEventListener('fetch', (event) => {
  event.respondWith(
    caches.match(event.request, { ignoreSearch: true })
      .then((response) => {
        // Cache hit - return response
        if (response) {
          return response;
        }

        // IMPORTANT: Clone the request. A request is a stream and
        // can only be consumed once. Since we are consuming this
        // once by cache and once by the browser for fetch, we need
        // to clone the response.
        const fetchRequest = event.request.clone();

        return fetch(fetchRequest).then(
          (response) => {
            // Check if we received a valid response
            if (!response || response.status !== 200 || (response.type !== 'basic' && response.type !== 'cors')) {
              return response;
            }

            // IMPORTANT: Clone the response. A response is a stream
            // and because we want the browser to consume the response
            // as well as the cache consuming the response, we need
            // to clone it so we have two streams.
            const responseToCache = response.clone();

            caches.open(CACHE_NAME)
              .then((cache) => {
                cache.put(event.request, responseToCache);
              });

            return response;
          }
        );
      })
    );
});
