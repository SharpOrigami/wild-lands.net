// FIX: Removed self-import of CardData and CardEffect which was causing a conflict.

export type Theme = 'western' | 'japan' | 'safari' | 'horror' | 'cyberpunk';


export type CardEffectType = 
  | 'damage'
  | 'apply_illness_on_linger' // For effects like Rattlesnake bite
  | 'poison'
  | 'damage_percent'
  | 'discard_equipped'
  | 'draw_reduction'
  | 'weapon'
  | 'trap'
  | 'campfire'
  | 'upgrade'
  | 'heal'
  | 'draw'
  | 'gold'
  | 'fire_arrow'
  | 'trick_shot'
  | 'scout'
  | 'bladed_technique'
  | 'conditional_weapon'
  | 'conditional_damage' // Added to resolve TypeScript errors
  | 'random_gold_steal' // Primarily for immediateEffect but can be a general effect type
  | 'lose_gold' // If a non-random gold loss is needed
  | 'objective_boss_condition'
  | 'objective_player_condition'
  | 'objective_discard_to_win';


export interface CardEffect {
  type: CardEffectType;
  amount?: number;
  damage?: number; // For conditional damage in events or poison
  attack?: number;
  bonus_attack?: number;
  condition?: string;
  cures?: boolean; // General cure
  cures_illness?: string; // Specific illness cure, e.g., 'Malaria'
  turn_end?: boolean;
  discard_equipped?: boolean;
  size?: 'small' | 'medium' | 'large';
  capacity?: number;
  subtype?: string; // For upgrades: 'max_health', 'bow_boost', 'quiver_boost', etc.
  persistent?: boolean;
  max_health?: number; // For hat specific health bonus
  maxAmount?: number; // For random_gold_steal immediateEffect
  breakDamage?: number; // For traps dealing damage when breaking
  trapThreshold?: number; // For traps, the HP value they can successfully trap
  temporary?: boolean; // For effects like Mountain Sickness that auto-expire
  illness_id?: string; // For 'apply_illness_on_linger' to specify which illness card to reference
  damage_on_apply?: number; // For 'apply_illness_on_linger' to deal immediate damage
  objective_description?: string;
  reward_description?: string;
  failure_description?: string;
  multiplier?: number;
}

export interface CardData {
  id: string;
  name: string;
  type: 'Event' | 'Provision' | 'Item' | 'Action' | 'Player Upgrade' | 'Trophy' | 'Objective Proof';
  subType?: 'animal' | 'human' | 'illness' | 'environmental' | 'objective'; // For Events
  health?: number; // For Threats
  goldValue?: number; // For Threats, or sellValue for items
  effect?: CardEffect;
  sellValue?: number;
  buyCost?: number;
  immediateEffect?: CardEffect; // For on-reveal effects
  description?: string;
  isPacified?: boolean; // True if talked down, to prevent morning attack but keep on screen
  isCheat?: boolean; // True if the card was generated by a cheat/special AI remix
  illustrationId?: string; // ID of another card to use for illustration
  satchelContents?: CardData[];
}

export interface Character {
  id: string;
  name: string;
  health: number;
  gold: number;
  starterDeck: string[];
  description: string;
  talkSkill: number; // Base integer points for talking skill.
  petSkill: number;  // Base integer points for petting skill.
  personality: {
    archetype: string;
    temperament: string;
    motivation: string;
  };
}

export interface RunStats {
  provisions_used_before_boss: number;
  provisions_used_during_boss: number;
  firearm_used_before_boss: number;
  firearm_used_during_boss: number;
  bladed_used_before_boss: number;
  bladed_used_during_boss: number;
  bow_used_before_boss: number;
  bow_used_during_boss: number;
  laudanum_used_before_boss: number;
  laudanum_used_during_boss: number;
  
  animals_killed_by_trap: number;
  animals_killed_by_bow: number;
  animals_killed_by_firearm: number;
  animals_killed_by_bladed: number;
  
  humans_killed_by_trap: number;
  humans_killed_by_bow: number;
  humans_killed_by_firearm: number;
  humans_killed_by_bladed: number;

  gold_spent: number;
  gold_earned: number;
  
  items_sold: number;
  provisions_sold: number;
  trophies_sold: number;
  objectives_sold: number;

  damage_dealt: number;
  damage_taken: number;
  health_healed: number;
  
  illnesses_contracted: number;
  illnesses_cured: number;
  
  times_restocked: number;
  threats_defeated: number;

  // New Stats
  highestNGPlusLevel: number;
  totalVictories: number;
  objectivesCompleted: number;
  victoriesByCharacter: { [characterId: string]: number };
  apexPredatorsSlain: number;
  pestsExterminated: number;
  biggestSingleHit: number;
  mostGoldHeld: number;
  closeCalls: number;
  trapsSprung: number;
  campfiresBuilt: number;
  lightningStrikesSurvived: number;
  timesSkunked: number;
  totalStepsTaken: number;
  kodamaKilled: number;
  laudanumAbuse: number;
  totalDaysSurvived: number;
  animalsPet: number;
  deEscalations: number;
}

export type LifetimeStats = RunStats;

export interface PlayerDetails {
  name: string | null;
  character: Character | null;
  health: number;
  maxHealth: number;
  characterBaseMaxHealthForRun: number; // Max health before items, for illness recovery target
  gold: number;
  hand: (CardData | null)[]; // Updated to allow null for empty slots
  equippedItems: CardData[];
  activeTrap: CardData | null;
  isCampfireActive: boolean;
  handSize: number;
  equipSlots: number;
  playerDeck: CardData[];
  playerDiscard: CardData[];
  hasEquippedThisTurn: boolean;
  satchels: { [equippedItemIndex: number]: CardData[] };
  turnEnded: boolean;
  hasTakenActionThisTurn: boolean;
  hasRestockedThisTurn: boolean;
  isUnsortedDraw: boolean; // Flag to skip sorting once after draw
  activeEventForAttack?: CardData | null; // Added for CardComponent attack calculations
  ngPlusLevel: number; // Added for NG+ adjustments
  hatDamageNegationAvailable: boolean; 
  hatDamageNegationUsedThisTurn?: boolean; // True if hat negated damage in current turn/event processing.
  currentIllnesses: CardData[]; // Tracks active NON-Mountain Sickness illnesses
  personality: {
    archetype: string;
    temperament: string;
    motivation: string;
  };
  pedometerActive: boolean;
  stepsTaken: number;
  lastPosition: { latitude: number; longitude: number; timestamp: number } | null;
  isGettingLocation: boolean;
  locationAccuracy: number | null;
  unaccountedDistanceFeet: number; // Added to accumulate distance for steps
  cumulativeNGPlusMaxHealthBonus: number; // For NG+ reward choice
  mountainSicknessActive: boolean; // True if player has mountain sickness
  mountainSicknessTurnsRemaining: number; // Tracks turns left for mountain sickness effect
  provisionsPlayed: number;
  runStats: RunStats; // New comprehensive stat tracking
  provisionsCollectedThisRun: number; // For 'Well-Prepared' objective tracking
  eventPacifiedThisTurn?: boolean;
  goldStolenThisTurn?: number;
  lastUsedWeaponType?: 'firearm' | 'bow' | 'bladed';
  forceBossRevealNextTurn?: boolean;
  capturedBossAlive?: boolean;
  talkSkill: number; // Final calculated talk skill (0.40 - 0.98)
  petSkill: number; // Final calculated pet skill (0.40 - 0.98)
}

export interface LogEntry {
  message: string;
  type: 'info' | 'error' | 'action' | 'system' | 'turn' | 'event' | 'gold' | 'debug';
  timestamp: string;
}

export interface ModalState {
  isOpen: boolean;
  title: string;
  text: string;
  confirmCallback?: () => void;
  confirmText?: string;
  choices?: { text: string; callback: () => void }[]; // For NG+ reward
  singleActionText?: string;
}

export interface ActiveGameBannerState {
  show: boolean;
  message: string;
  bannerType: 'event_alert' | 'threat_defeated' | 'generic_info' | 'turn_ending_event';
  bannerId: number;
  timestamp: number;
}

export type BannerQueueItem = Omit<ActiveGameBannerState, 'timestamp' | 'show'>;

export interface GameState {
  runId: string;
  status: 'landing' | 'setup' | 'generating_boss_intro' | 'showing_boss_intro' | 'playing_initial_reveal' | 'playing' | 'finished' | 'deck_review';
  playerDetails: { [playerId: string]: PlayerDetails }; // Using string index for player ID
  eventDeck: CardData[];
  eventDiscardPile: CardData[];
  activeEvent: CardData | null;
  activeObjectives: CardData[];
  storeItemDeck: CardData[];
  storeDisplayItems: (CardData | null)[];
  storeItemDiscardPile: CardData[]; // Added for store restock logic
  turn: number;
  storyGenerated: boolean;
  log: LogEntry[];
  selectedCard: { card: CardData; source: string; index: number } | null;
  ngPlusLevel: number;
  winReason?: string;
  endSequenceTriggered?: boolean;
  aiBoss?: CardData; // Stores the generated AI boss
  modals: { message: ModalState, story: ModalState, ngPlusReward: ModalState };
  goldFlashPlayer?: boolean; 
  laudanumVisualActive?: boolean; 
  showLightningStrikeFlash?: boolean; // Added for global lightning flash
  blockTradeDueToHostileEvent: boolean; 
  playerAttackedEventThisTurn?: boolean; // Tracks if the current active event was attacked this turn
  activeGameBanner: ActiveGameBannerState | null; // New state for general game banners
  bannerQueue: BannerQueueItem[];
  animationQueue?: { type: 'laudanum' | 'skunkspray'; id: number }[];
  currentAnimation?: { type: 'laudanum' | 'skunkspray'; id: number; startTime: number; } | null;
  pendingPlayerDamageAnimation?: { amount: number; sourceName: string; eventId?: string } | null; // For new damage animation
  bossIntroTitle?: string;
  bossIntroParagraph?: string;
  isLoadingBossIntro?: boolean; // Added to manage loading state for BossIntroStoryComponent
  playerDeckAugmentationPool: CardData[]; // Pool of cards for completing player deck
  initialCardPool: CardData[]; // Pool of all cards for the current theme, before deck building
  activeEventTurnCounter: number; // Tracks how many turns the current event has been active
  scrollAnimationPhase: 'none' | 'fadingOutAndScrollingDown' | 'fadingInAndScrollingUp'; // New state for end-of-day scroll animation
  skunkSprayVisualActive?: boolean; // New: For full-screen skunk spray visual
  isLoadingStory: boolean; // Added for story generation loading indicator
  isLoadingNGPlus?: boolean; // Added for NG+ loading indicator
  showNGPlusRewardModal?: boolean; // To trigger NG+ reward choice modal
  pedometerFeatureEnabledByUser: boolean; // New: User has explicitly enabled the pedometer feature
  deckForReview?: CardData[]; // For the new end-of-run deck selection
  objectiveSummary?: {
    title: string;
    message: string;
    status: 'success' | 'failure';
  };
  showObjectiveSummaryModal?: boolean;
  gameJustStarted?: boolean;
  playerShake?: boolean;
  newlyDrawnCardIndices?: number[];
  equipAnimationIndex?: number | null;
  eventDifficultyBonus: number;
  remixDeckOnStart?: boolean;
  remixProgress?: number;
  saveSlotIndex?: number | null;
  autosaveSlotIndex?: number | null;
  isBossFightActive?: boolean;
  triggerThreatShake?: boolean;
  triggerStoreRestockAnimation?: boolean;
  objectiveChoices: CardData[];
  selectedObjectiveIndices: number[];
  runStartState?: any;
  runStartGold?: number;
}

export interface AIBossData {
    name: string;
    health: number;
    damage: number;
    description: string;
}

// Enum for card display contexts, useful for styling or logic
export enum CardContext {
  HAND = 'hand',
  EQUIPPED = 'equipped',
  STORE = 'store',
  EVENT = 'event',
  CHARACTER_SELECTION = 'character_selection',
  SCOUTED_PREVIEW = 'scouted_preview',
  DECK_REVIEW = 'deck_review',
  SATCHEL_VIEW = 'satchel_view',
}